# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---
# The global properties are used to configure multiple charts at once.
global:
  # -- Indicates wether this chart is part of a Nubus deployment.
  nubusDeployment: false
  # -- Container registry address.
  imageRegistry: "artifacts.software-univention.de"

  # -- Credentials to fetch images from private registry.
  # Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
  #
  # imagePullSecrets:
  #   - "docker-registry"
  imagePullSecrets: []

  # -- Define an ImagePullPolicy.
  #
  # Ref.: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy
  #
  # "IfNotPresent" => The image is pulled only if it is not already present locally.
  # "Always" => Every time the kubelet launches a container, the kubelet queries the container image registry to
  #             resolve the name to an image digest. If the kubelet has a container image with that exact digest cached
  #             locally, the kubelet uses its cached image; otherwise, the kubelet pulls the image with the resolved
  #             digest, and uses that image to launch the container.
  # "Never" => The kubelet does not try fetching the image. If the image is somehow already present locally, the
  #            kubelet attempts to start the container; otherwise, startup fails.
  imagePullPolicy: null

  configMapUcr: null

  # -- Define configuration regarding nats connectivity.
  nats:
    connection:
      host: ""
      port: ""

api:
  image:
    registry: ""
    pullPolicy: null
    repository: "nubus-dev/images/provisioning-events-and-consumer-api"
    tag: "0.44.1@sha256:c34020a9c402e204948df782e161329bc4644442d680397d2736024881b9d766"
  # If specified environment variables will be set on the container
  nats:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          provisioningApiPassword: null
  auth:
    admin:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: "admin_password"
    eventsUdm:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: "events_udm_password"
    prefill:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: "prefill_password"
  config:
    # Python log level
    LOG_LEVEL: "INFO"
    ## api
    # FastAPI: debug mode: send traceback in response on errors
    DEBUG: "false"
    # FastAPI: webserver root path
    ROOT_PATH: "/"
    # FastAPI: disable CORS checks
    CORS_ALL: "false"
  additionalLabels: {}
  additionalAnnotations: {}
  podAnnotations: {}

dispatcher:
  image:
    # TODO: unset when global.imageRegistry is supported by update-helm-values
    registry: ""
    pullPolicy: null
    repository: "nubus-dev/images/provisioning-dispatcher"
    tag: "0.44.1@sha256:67289856a73701fae780f305cc86d627452812e86cd1e6abdb2893a5b74a6eb7"
  # If specified environment variables will be set on the container
  nats:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: null
  config:
    # Python log level
    LOG_LEVEL: "INFO"
    natsMaxReconnectAttempts: 5
  additionalLabels: {}
  additionalAnnotations: {}
  podAnnotations: {}

udmTransformer:
  image:
    registry: ""
    pullPolicy: null
    repository: "nubus-dev/images/provisioning-udm-transformer"
    tag: "0.44.1@sha256:2209558b3a544739b982637d57480951044247e3baae242d30e8e6437e9925c8"
  nats:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: null
  # If specified environment variables will be set on the container
  ldap:
    # LDAP BASE DN of the LDAP domain.
    baseDn: ""
    auth:
      # -- LDAP username with global read access
      bindDn: "cn=admin,dc=univention-organization,dc=intranet"
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: null
    connection:
      # Hostname of the LDAP Primary servers
      host: ""
      # LDAP server port
      port: ""
  config:
    # Enables toggling between `ldif-producer` and `udm-listener`.
    # Beware: `ldif-producer` is experimental and unsupported.
    ldapPublisherName: "udm-listener"
    # Python log level
    LOG_LEVEL: "INFO"
    # -- Whether to start ldap encryption and validate certificates.
    # Chose from "off", "unvalidated" and "secure".
    LDAP_TLS_MODE: "off"
  additionalLabels: {}
  additionalAnnotations: {}
  podAnnotations: {}

prefill:
  image:
    registry: ""
    pullPolicy: null
    repository: "nubus-dev/images/provisioning-prefill"
    tag: "0.44.1@sha256:79a87775aa23fef2716203b2e38048ef75afe5d7ff3eb25c992bc6ec1041ea86"

  # If specified environment variables will be set on the container
  nats:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          prefillPassword: null

  udm:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: null

  config:
    maxPrefillAttempts: 5
    natsMaxReconnectAttempts: 5
    # Python log level
    LOG_LEVEL: "INFO"
    # UDM REST API: host defaults to %RELEASE-NAME%-udm-rest-api
    UDM_HOST: ""
    # UDM REST API: port
    UDM_PORT: 9979
  additionalLabels: {}
  additionalAnnotations: {}
  podAnnotations: {}

registerConsumers:
  image:
    registry: ""
    pullPolicy: null
    repository: "nubus/images/wait-for-dependency"
    tag: "0.32.1@sha256:44d45067e1d4e7a00d3b651e56df5177087e3206368a45cd1816d78ba7b21347"

  # -- Allows to create users in the Provisioning API.
  #
  # The entries have to be in the following structure:
  #
  #   consumerName:
  #     existingSecret:
  #       name: null
  #       keyMapping:
  #         registration: null
  #
  # The entries can only be provided as existing secrets and the content of the
  # key "registration" has to follow the correct JSON structure.
  #
  # This parameter shall be used as an integration point between the consumer's
  # chart and this chart. The consumer's chart owns the Secret and has to store
  # the correct JSON data within the Secret. This chart only receives a
  # reference this Secret so that it can register the consumer.
  createUsers: {}

  config:
    # UDM REST API: host defaults to %RELEASE-NAME%-udm-rest-api
    UDM_HOST: ""
    # UDM REST API: port
    UDM_PORT: 9979

  udm:
    auth:
      password: null
      existingSecret:
        name: null
        keyMapping:
          password: null

  jsonSecretName: ""
  provisioningApiBaseUrl: ""
  additionalLabels: {}
  additionalAnnotations: {}
  podAnnotations: {}

# -- NATS server settings.
nats:
  nats:
    image:
      registry: "docker.io"
  reloader:
    image:
      registry: "docker.io"
  natsBox:
    image:
      registry: "docker.io"
  # -- Set to `true` if you want NATS to be installed as well.
  bundled: true
  nameOverride: "provisioning-nats"
  connection:
    # -- The NATS service to connect to.
    host: ""
    # -- The port to connect to the NATS service.
    port: ""
    # -- The token to use when connecting to the NATS service.
    # token:
    tls:
      enabled: false
      # -- The private key to use for the connection.
      keyFile: "/certificates/tls.key"
      # -- The certificate to present when initialising the connection.
      certFile: "/certificates/tls.crt"
      # -- The CA to verify the servers identity when initialising the connection.
      caFile: "/certificates/ca.crt"
  # The NATS server configuration.
  # Ref: https://git.knut.univention.de/univention/customers/dataport/upx/nats-helm/-/blob/main/README.md
  affinity:
    # Disable the pod affinity rules when running on a cluster with less than 3 kubernetes nodes.
    enabled: true
  config:
    cluster:
      # -- Has to be set to at least 3, the minimum for nats clustering
      replicas: 3
    jetstream:
      enabled: true
    extraConfig:
      max_payload: "16MB"
    authorization:
      enabled: true
    createUsers:
      provisioningApi:
        user: "api"
        password: "$NATS_PROVISIONING_API_PASSWORD"
        permissions:
          publish: ">"
          subscribe: ">"
      dispatcher:
        user: "dispatcher"
        password: "$NATS_DISPATCHER_PASSWORD"
        permissions:
          publish: ">"
          subscribe: ">"
      udmTransformer:
        user: "udmtransformer"
        password: "$NATS_UDM_TRANSFORMER_PASSWORD"
        permissions:
          publish: ">"
          subscribe: ">"
      prefill:
        user: "prefill"
        password: "$NATS_PREFILL_PASSWORD"
        permissions:
          publish: ">"
          subscribe: ">"
  extraEnvVars:
    - name: NATS_PASSWORD
      valueFrom:
        secretKeyRef:
          name: null
          key: null
    - name: NATS_PROVISIONING_API_PASSWORD
      valueFrom:
        secretKeyRef:
          name: null
          key: null
    - name: NATS_DISPATCHER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: null
          key: null
    - name: NATS_UDM_TRANSFORMER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: null
          key: null
    - name: NATS_PREFILL_PASSWORD
      valueFrom:
        secretKeyRef:
          name: null
          key: null

# -- Additional custom annotations to add to all deployed objects.
additionalAnnotations: {}

# -- Additional custom labels to add to all deployed objects.
additionalLabels: {}

# -- Affinity for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#affinity-and-anti-affinity
# Note: podAffinityPreset, podAntiAffinityPreset, and nodeAffinityPreset will be ignored when it's set.
affinity: {}

# Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
containerSecurityContext:
  privileged: false
  # -- Enable container privileged escalation.
  allowPrivilegeEscalation: false
  # -- Security capabilities for container.
  capabilities:
    drop:
      - "ALL"
  # -- Enable security context.
  enabled: true
  # -- Process user id.
  runAsUser: 1000
  # -- Process group id.
  runAsGroup: 1000
  # Set Seccomp profile.
  seccompProfile:
    # -- Disallow custom Seccomp profile by setting it to RuntimeDefault.
    type: "RuntimeDefault"
  # -- Mounts the container's root filesystem as read-only.
  readOnlyRootFilesystem: true
  # -- Run container as a user.
  runAsNonRoot: true

# -- Array with extra environment variables to add to containers.
#
# extraEnvVars:
#   - name: FOO
#     value: "bar"
extraEnvVars: []

# -- Optionally specify a secret to create (primarily intended to be used in development environments to provide custom certificates)
extraSecrets: []

# -- Optionally specify an extra list of additional volumes.
extraVolumes: []

# -- Optionally specify an extra list of additional volumeMounts.
extraVolumeMounts: []

# -- Provide a name to substitute for the full names of resources.
fullnameOverride: ""

# -- Credentials to fetch images from private registry.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/
#
# imagePullSecrets:
#   - "docker-registry"
imagePullSecrets: []

# Define and create Kubernetes Ingress.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/
ingress:
  # -- Enable creation of Ingress.
  enabled: false

  # -- Define the Fully Qualified Domain Name (FQDN) where application should be reachable.
  host: ""

  # -- Define the Ingress path.
  paths: []

  # -- Each path in an Ingress is required to have a corresponding path type.
  # Paths that do not include an explicit pathType will fail validation.
  # There are three supported path types:
  #
  # "ImplementationSpecific" => With this path type, matching is up to the IngressClass. Implementations can treat this
  #                             as a separate pathType or treat it identically to Prefix or Exact path types.
  # "Exact" => Matches the URL path exactly and with case sensitivity.
  # "Prefix" => Matches based on a URL path prefix split by /.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#path-types
  pathType: "Prefix"

  # -- The Ingress controller class name.
  ingressClassName: "nginx"

  # -- Define custom ingress annotations.
  # annotations:
  #   nginx.ingress.kubernetes.io/rewrite-target: /
  annotations: {}

  # -- Secure an Ingress by specifying a Secret that contains a TLS private key and certificate.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/ingress/#tls
  tls:
    # -- Enable TLS/SSL/HTTPS for Ingress.
    enabled: true

    # -- The name of the kubernetes secret which contains a TLS private key and certificate.
    # Hint: This secret is not created by this chart and must be provided.
    secretName: ""

## Istio support
istio:
  # -- Set this to `true` in order to enable the installation on Istio related objects.
  enabled: false
  # -- The hostname. This parameter has to be supplied. Example `portal.example`.
  # host: provisioning.local
  virtualService:
    enabled: true
    annotations: {}
    # -- Allows to inject deployment specific path configuration which is configured before
    # the elements from `paths` below. This allows to redirect some paths to other services,
    # e.g. in order to supply a file `custom.css`.
    pathOverrides: []
    # -- The paths configuration. The default only grabs what is known to be
    # part of the frontend.
    #
    # `pathOverrides` is provided as a workaround so that specific sub-paths can
    # be redirected to other services.
    paths: []

  gateway:
    enabled: false
    annotations:
    selectorIstio: "ingressgateway"
    externalGatewayName: "swp-istio-gateway"
    tls:
      enabled: true
      httpsRedirect: true
      secretName: ""

# -- Lifecycle to automate configuration before or after startup.
lifecycleHooks: {}

#  Configure extra options for containers probes.
livenessProbe:
  dispatcher:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until LivenessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  udmTransformer:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until LivenessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  prefill:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until LivenessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  api:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until LivenessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    tcpSocket:
      # -- The port to connect to the container.
      port: 7777

# -- String to partially override release name.
nameOverride: "provisioning"

# -- Node labels for pod assignment.
# Ref: https://kubernetes.io/docs/user-guide/node-selection/
nodeSelector: {}

# -- Pod Annotations.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/annotations/
podAnnotations: {}

# -- Pod Labels.
# Ref: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/
podLabels: {}

# Pod Security Context.
# Ref: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
podSecurityContext:
  # -- Enable security context.
  enabled: true

  # -- If specified, all processes of the container are also part of the supplementary group.
  fsGroup: 1000

  # -- Change ownership and permission of the volume before being exposed inside a Pod.
  fsGroupChangePolicy: "Always"

  # -- Allow binding to ports below 1024 without root access.
  sysctls:
    - name: "net.ipv4.ip_unprivileged_port_start"
      value: "1"

#  Configure extra options for containers probes.
readinessProbe:
  dispatcher:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until ReadinessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  udmTransformer:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until ReadinessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  prefill:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until ReadinessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  api:
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Delay after container start until ReadinessProbe is executed.
    initialDelaySeconds: 15
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    tcpSocket:
      # -- The port to connect to the container.
      port: 7777

# -- Set the amount of replicas of deployment.
replicaCount:
  # TODO: Discuss that this may never be higher than 1
  dispatcher: 1
  # TODO: Discuss that this may never be higher than 1
  udmTransformer: 1
  prefill: 1
  api: 1

# Configure resource requests and limits.
#
# Ref: https://kubernetes.io/docs/user-guide/compute-resources/
resources:
 dispatcher:
   limits:
     cpu: 1
     memory: "1Gi"
   requests:
     cpu: 0.1
     memory: "64Mi"
 udmTransformer:
   limits:
     cpu: 1
     memory: "1Gi"
   requests:
     cpu: 0.1
     memory: "64Mi"
 prefill:
   limits:
     cpu: 1
     memory: "1Gi"
   requests:
     cpu: 0.1
     memory: "64Mi"
 registerConsumers:
   limits:
     cpu: 1
     memory: "1Gi"
   requests:
     cpu: 0.1
     memory: "64Mi"
 api:
   limits:
     cpu: 1
     memory: "1Gi"
   requests:
     cpu: 0.1
     memory: "100Mi"

# Define and create Kubernetes Service.
#
# Ref.: https://kubernetes.io/docs/concepts/services-networking/service
service:
  # -- Additional custom annotations.
  annotations: {}
  # -- Enable kubernetes service creation.
  enabled: true
  # "ClusterIP" => Exposes the Service on a cluster-internal IP. Choosing this value makes the Service only reachable
  #                from within the cluster. This is the default that is used if you don't explicitly specify a type for
  #                a Service.
  # "NodePort" => Exposes the Service on each Node's IP at a static port (the NodePort). To make the node port
  #               available, Kubernetes sets up a cluster IP address, the same as if you had requested a Service of
  #               type: ClusterIP.
  # "LoadBalancer" => Exposes the Service externally using a cloud provider's load balancer.
  #
  # Ref.: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
  # -- Choose the kind of Service, one of "ClusterIP", "NodePort" or "LoadBalancer".
  type: "ClusterIP"

  # Define the ports of Service.
  # You can set the port value to an arbitrary value, it will map the container port by name.
  #
  ports:
    http:
      # -- Accessible port.
      port: 80
      # -- Internal port.
      containerPort: 7777
      # -- service protocol.
      protocol: "TCP"

# Service account to use.
# Ref.: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Allows auto mount of ServiceAccountToken on the serviceAccount created
  ## Can be set to false if pods using this serviceAccount do not need to use K8s API
  ##
  automountServiceAccountToken: false
  # -- Additional custom labels for the ServiceAccount.
  labels: {}

#  Configure extra options for containers probes.
startupProbe:
  dispatcher:
    # -- Delay after container start until StartupProbe is executed.
    initialDelaySeconds: 15
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  udmTransformer:
    # -- Delay after container start until StartupProbe is executed.
    initialDelaySeconds: 15
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  prefill:
    # -- Delay after container start until StartupProbe is executed.
    initialDelaySeconds: 15
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    timeoutSeconds: 5
    exec:
      command:
        - sh
        - -c
        - |
          exit 0
  api:
    # -- Delay after container start until StartupProbe is executed.
    initialDelaySeconds: 15
    # -- Number of failed executions until container is terminated.
    failureThreshold: 10
    # -- Time between probe executions.
    periodSeconds: 20
    # -- Number of successful executions after failed ones until container is marked healthy.
    successThreshold: 1
    # -- Timeout for command return.
    tcpSocket:
      # -- The port to connect to the container.
      port: 7777

# -- In seconds, time the given to the pod needs to terminate gracefully.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod/#termination-of-pods
terminationGracePeriodSeconds: ""

# -- Tolerations for pod assignment.
# Ref: https://kubernetes.io/docs/concepts/configuration/taint-and-toleration/
tolerations: []

# -- Topology spread constraints rely on node labels to identify the topology domain(s) that each Node is in.
# Ref: https://kubernetes.io/docs/concepts/workloads/pods/pod-topology-spread-constraints/
#
# topologySpreadConstraints:
#   - maxSkew: 1
#     topologyKey: failure-domain.beta.kubernetes.io/zone
#     whenUnsatisfiable: DoNotSchedule
topologySpreadConstraints: []

# Set up update strategy.
#
# Ref: https://kubernetes.io/docs/concepts/workloads/controllers/deployment/#strategy
#
# Example:
# updateStrategy:
#  type: RollingUpdate
#  rollingUpdate:
#    maxSurge: 25%
#    maxUnavailable: 25%
updateStrategy:
  # -- Set to Recreate if you use persistent volume that cannot be mounted by more than one pods to make sure the pods
  # are destroyed first.
  # FIXME: Change to `RollingUpdate` after this bug is fixed
  # https://git.knut.univention.de/univention/customers/dataport/upx/provisioning/-/issues/70
  type: "Recreate"
