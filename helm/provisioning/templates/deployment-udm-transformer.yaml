# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

---
apiVersion: {{ include "common.capabilities.deployment.apiVersion" . }}
kind: Deployment
metadata:
  name: {{ printf "%s-udm-transformer" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
      {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
      {{- $uiLabels := dict "app.kubernetes.io/name" (printf "%s-udm-transformer" (include "common.names.fullname" .)) }}
      {{- $mergedLabels := merge $uiLabels $commonLabels}}
      {{- toYaml $mergedLabels | nindent 4 }}
  {{- if .Values.udmTransformer.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.udmTransformer.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount.udmTransformer }}
  selector:
    matchLabels:
      {{- $commonLabels := include "common.labels.matchLabels" . | fromYaml }}
      {{- $uiLabels := dict "app.kubernetes.io/name" (printf "%s-udm-transformer" (include "common.names.fullname" .)) }}
      {{- merge $uiLabels $commonLabels | toYaml | nindent 6 }}
  {{- if .Values.updateStrategy.type }}
  strategy:
    type: {{ .Values.updateStrategy.type }}
  {{- end }}
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.udmTransformer.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.udmTransformer.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
        {{- $uiLabels := dict "app.kubernetes.io/name" (printf "%s-udm-transformer" (include "common.names.fullname" .)) }}
        {{- $mergedLabels := merge $uiLabels $commonLabels}}
        {{- toYaml $mergedLabels | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      initContainers:
        - name: "load-internal-plugins"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.udmTransformer.image.registry .Values.global.imageRegistry }}/{{ .Values.udmTransformer.image.repository }}:{{ .Values.udmTransformer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.udmTransformer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          command:
            - sh
            - -c
            - |
              mkdir -p /target/udm-modules
              mkdir -p /target/udm-hooks.d
              mkdir -p /target/udm-syntax.d
              mkdir -p /target/udm-handlers
              cp -av /usr/lib/python3/dist-packages/univention/udm/modules/* /target/udm-modules
              cp -av /usr/lib/python3/dist-packages/univention/admin/hooks.d/* /target/udm-hooks.d
              cp -av /usr/lib/python3/dist-packages/univention/admin/syntax.d/* /target/udm-syntax.d
              cp -av /usr/lib/python3/dist-packages/univention/admin/handlers/* /target/udm-handlers
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          {{- if .Values.resources.udmTransformer }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.udmTransformer "context" .) | nindent 12 }}
          {{- end }}
        {{- $systemExtensions := default (list) (coalesce .Values.systemExtensions .Values.global.systemExtensions) -}}
        {{- $extensions := default (list) (coalesce .Values.extensions .Values.global.extensions) -}}
        {{- range (concat $systemExtensions $extensions) }}
        - name: "load-{{ .name }}-extension"
          {{- if $.Values.containerSecurityContext.enabled }}
          securityContext: {{- omit $.Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .image.registry $.Values.global.imageRegistry }}/{{ .image.repository }}:{{ .image.tag }}"
          imagePullPolicy: {{ coalesce .image.pullPolicy $.Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: plugin-targets
              mountPath: /target
          {{- if $.Values.resources.udmTransformer }}
          resources: {{- include "common.tplvalues.render" (dict "value" $.Values.resources.udmTransformer "context" $) | nindent 12 }}
          {{- end }}
        {{- end }}
        - name: wait-for-nats
          command: [ "python3", "/scripts/wait-for-nats.py" ]
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          image: "{{ coalesce .Values.api.image.registry .Values.global.imageRegistry }}/{{ .Values.api.image.repository }}:{{ .Values.api.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.api.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-common" (include "common.names.fullname" .) }}
            - configMapRef:
                name: {{ printf "%s-api" (include "common.names.fullname" .) }}
          env:
            - name: NATS_USER
              value: "udmtransformer"
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.udmTransformer.nats.auth.existingSecret "defaultNameSuffix" "udm-transformer-nats" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udmTransformer.nats.auth.existingSecret "key" "password") | quote }}
          volumeMounts:
            - name: wait-for-nats
              mountPath: /scripts
          {{- if .Values.resources.api }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.api "context" .) | nindent 12 }}
          {{- end }}
      containers:
        - name: "main"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          {{- end }}
          image: "{{ coalesce .Values.udmTransformer.image.registry .Values.global.imageRegistry }}/{{ .Values.udmTransformer.image.repository }}:{{ .Values.udmTransformer.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.udmTransformer.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-common" (include "common.names.fullname" .) }}
            - configMapRef:
                name: {{ printf "%s-udm-transformer" (include "common.names.fullname" .) }}
          env:
            - name: NATS_USER
              value: "udmtransformer"
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.udmTransformer.nats.auth.existingSecret "defaultNameSuffix" "udm-transformer-nats" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udmTransformer.nats.auth.existingSecret "key" "password") | quote }}
            - name: EVENTS_USERNAME_UDM
              value: "udm"
            - name: EVENTS_PASSWORD_UDM
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.api.auth.eventsUdm.existingSecret "defaultNameSuffix" "api-events" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.api.auth.eventsUdm.existingSecret "key" "password") | quote }}
            - name: LDAP_BIND_PW
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.udmTransformer.ldap.auth.existingSecret "defaultNameSuffix" "udm-transformer-ldap" "context" .) | quote }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.udmTransformer.ldap.auth.existingSecret "key" "password") | quote }}
          {{- with .Values.extraEnvVars }}
            {{- . | toYaml | nindent 12 }}
          {{- end }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.livenessProbe.udmTransformer "context" .) | nindent 12 }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.readinessProbe.udmTransformer "context" .) | nindent 12 }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.startupProbe.udmTransformer "context" .) | nindent 12 }}
          {{- if .Values.resources.udmTransformer }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.udmTransformer "context" .) | nindent 12 }}
          {{- end }}
          {{- if .Values.lifecycleHooks }}
          lifecycle: {{- include "common.tplvalues.render" (dict "value" .Values.lifecycleHooks "context" .) | nindent 12 }}
          {{- end }}
          volumeMounts:
            {{- if .Values.nats.connection.tls.enabled }}
            - name: certificates-volume
              mountPath: /certificates
            {{- end }}
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base.conf"
              subPath: "base.conf"
            - name: "config-map-ucr"
              mountPath: "/etc/univention/base-defaults.conf"
              subPath: "base-defaults.conf"
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/udm/modules
              subPath: udm-modules
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/hooks.d
              subPath: udm-hooks.d
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/syntax.d
              subPath: udm-syntax.d
              readOnly: true
            - name: plugin-targets
              mountPath: /usr/lib/python3/dist-packages/univention/admin/handlers
              subPath: udm-handlers
              readOnly: true
      volumes:
        - name: wait-for-nats
          configMap:
            name: {{ printf "%s-api" (include "common.names.fullname" .) }}
        {{- if .Values.nats.connection.tls.enabled }}
        - name: certificates-volume
          secret:
            secretName: {{ .Values.nats.connection.tls.secretName  | default (printf "%s-udm-transformer-tls" (include "common.names.fullname" .) ) | quote }}
        {{- end }}
        - name: "config-map-ucr"
          configMap:
            name: {{ include "udm-transformer.configMapUcr" . | quote }}
        - name: "plugin-targets"
          emptyDir: {}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
