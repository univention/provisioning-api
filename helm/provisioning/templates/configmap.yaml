# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-common" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  PROVISIONING_API_HOST: {{ printf "%s-api" (include "common.names.fullname" .) }}
  PROVISIONING_API_PORT: "80"
  {{- if .Values.nats.bundled }}
  NATS_HOST: {{ printf "%s-nats" (include "common.names.fullname" .) }}
  NATS_PORT: "4222"
  {{- else }}
  NATS_HOST: {{ required ".Values.nats.connection.host is required." .Values.nats.connection.host | quote }}
  NATS_PORT: {{ required ".Values.nats.connection.port is required." .Values.nats.connection.port | quote }}
  {{- end }}
  {{- if .Values.nats.connection.token }}
  NATS_CLIENTAUTH_TOKEN: {{ .Values.nats.connection.token | quote }}
  {{- end }}
  {{- if .Values.nats.connection.tls.enabled }}
  NATS_TLS_KEY_FILE: {{ required ".Values.nats.connection.tls.keyFile is required." .Values.nats.connection.tls.keyFile | quote }}
  NATS_TLS_CERT_FILE: {{ required ".Values.nats.connection.tls.certFile is required." .Values.nats.connection.tls.certFile | quote }}
  NATS_TLS_CA_FILE: {{ required ".Values.nats.connection.tls.caFile is required." .Values.nats.tls.caFile | quote }}
  {{- end }}
...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-wait-for-api" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
{{ (.Files.Glob "wait-for-api.sh").AsConfig | required "Missing wait-for-api.sh config file" | indent 2 }}
...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-api" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  LOG_LEVEL: {{ required ".Values.api.config.LOG_LEVEL is required." .Values.api.config.LOG_LEVEL | quote  }}
  DEBUG: {{ required ".Values.api.config.DEBUG is required." .Values.api.config.DEBUG | quote  }}
  ROOT_PATH: {{ required ".Values.api.config.ROOT_PATH is required." .Values.api.config.ROOT_PATH | quote  }}
  CORS_ALL: {{ required ".Values.api.config.CORS_ALL is required." .Values.api.config.CORS_ALL | quote  }}
  wait-for-nats.py: |
    #!/usr/bin/env python3
    import os
    import asyncio
    from nats.aio.client import Client as NATS

    async def error_cb(e):
        print(f"Unavailable, waiting 2 seconds. Error: {e}")
        await asyncio.sleep(2)

    async def check_nats():
        nc = NATS()
        print("Checking if NATS server can be reached...")
        await nc.connect(
            servers=[f"nats://{os.environ['NATS_HOST']}:{os.environ['NATS_PORT']}"],
            error_cb=error_cb,
            user=os.environ['NATS_USER'],
            password=os.environ['NATS_PASSWORD'],
        )
        print("Success, the NATS server is available")
        await nc.close()

    asyncio.run(check_nats())
...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-dispatcher" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  LOG_LEVEL: {{ required ".Values.dispatcher.config.LOG_LEVEL is required." .Values.dispatcher.config.LOG_LEVEL | quote  }}
  NATS_MAX_RECONNECT_ATTEMPTS: {{ required ".Values.dispatcher.config.natsMaxReconnectAttempts is required." .Values.dispatcher.config.natsMaxReconnectAttempts | quote  }}
  UDM_HOST: {{ include "provisioning.udmRestApi.host" . | quote }}
  UDM_PORT: {{ include "provisioning.udmRestApi.port" . | quote }}
...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-prefill" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  MAX_PREFILL_ATTEMPTS: {{ required ".Values.prefill.config.maxPrefillAttempts is required." .Values.prefill.config.maxPrefillAttempts | quote  }}
  NATS_MAX_RECONNECT_ATTEMPTS: {{ required ".Values.prefill.config.maxReconnectAttempts is required." .Values.prefill.config.natsMaxReconnectAttempts | quote  }}
  LOG_LEVEL: {{ required ".Values.prefill.config.LOG_LEVEL is required." .Values.prefill.config.LOG_LEVEL | quote  }}
  UDM_HOST: {{ include "provisioning.udmRestApi.host" . | quote }}
  UDM_PORT: {{ include "provisioning.udmRestApi.port" . | quote }}
  wait-for-udm.py: |
    #!/bin/python3
    import os
    import time
    import sys
    from univention.admin.rest.client import UDM

    udm = UDM.http(
        f"http://{os.environ['UDM_HOST']}:{os.environ['UDM_PORT']}/udm/",
        os.environ["UDM_USERNAME"],
        os.environ["UDM_PASSWORD"],
    )

    timeout = int(os.environ.get("TIMEOUT", "600"))
    start_time = time.time()

    while time.time() - start_time < timeout:
        print("Checking if UDM Rest API can be reached...")
        try:
            udm.get_ldap_base()
            print("Success, UDM Rest API is available")
            sys.exit(0)
        except Exception as e:
            print(f"Unavailable, waiting 2 seconds. Error: {e}")
            time.sleep(2)

    print("Timeout reached, giving up")
    sys.exit(1)
...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-udm-transformer" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  LDAP_PUBLISHER_NAME: {{ required ".Values.udmTransformer.config.ldapPublisherName is required." .Values.udmTransformer.config.ldapPublisherName | quote  }}
  LOG_LEVEL: {{ required ".Values.udmTransformer.config.LOG_LEVEL is required." .Values.udmTransformer.config.LOG_LEVEL | quote  }}
  UDM_HOST: {{ include "provisioning.udmRestApi.host" . | quote }}
  UDM_PORT: {{ include "provisioning.udmRestApi.port" . | quote }}
  LDAP_HOST: {{ include "provisioning.udmTransformer.ldap.connection.host" . | quote }}
  LDAP_PORT: {{ include "provisioning.udmTransformer.ldap.connection.port" . | quote }}
  LDAP_TLS_MODE: {{ required ".Values.udmTransformer.config.LDAP_TLS_MODE is required." .Values.udmTransformer.config.LDAP_TLS_MODE | quote }}

  LDAP_BASE_DN: {{ include "provisioning.udmTransformer.ldap.baseDn" . | quote }}
  LDAP_BIND_DN: {{ tpl ( required "The parameter \"udmTransformer.ldap.auth.bindDn\" is required." .Values.udmTransformer.ldap.auth.bindDn ) . | quote }}

...
---
kind: "ConfigMap"
apiVersion: "v1"
metadata:
  name: {{ printf "%s-register-consumers" (include "common.names.fullname" .) }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
    {{- if .Values.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
data:
  PROVISIONING_API_BASE_URL: {{ printf "%s/v1/subscriptions" (include "provisioning-register-consumers.provisioningApiBaseUrl" .) | quote  }}
  UDM_HOST: {{ include "provisioning.udmRestApi.host" . | quote }}
  UDM_PORT: {{ include "provisioning.udmRestApi.port" . | quote }}
  LDAP_BASE_DN: {{ include "provisioning.udmTransformer.ldap.baseDn" . | quote }}
  wait-for-data-loader.sh: |
    #!/bin/bash
    # TODO: find a way to not leak the udm passwort into the log
    set -euxo pipefail

    while ! (set +x; curl -o- --fail -X GET -u "${UDM_USERNAME}:${UDM_PASSWORD}" "http://${UDM_HOST}:${UDM_PORT}/udm/settings/data/cn=stack-data-ums.done,cn=data,cn=univention,${LDAP_BASE_DN}" -H 'Accept: application/json'); do
      echo "Data loader not finished yet, waiting..."
      sleep 2
    done

    echo "Success, the data loader has finished."
...
