# SPDX-License-Identifier: AGPL-3.0-only
# SPDX-FileCopyrightText: 2024 Univention GmbH

{{ $fullname := include "common.names.fullname" . }}
{{ $fullnameWithRevision := include "provisioning.names.fullnameWithRevision" (dict "localName" "register-consumers" "context" .) }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ $fullnameWithRevision }}
  namespace: {{ include "common.names.namespace" . | quote }}
  labels:
      {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
      {{- $uiLabels := dict "app.kubernetes.io/name" $fullnameWithRevision }}
      {{- $mergedLabels := merge $uiLabels $commonLabels}}
      {{- toYaml $mergedLabels | nindent 4 }}
    {{- if .Values.registerConsumers.additionalLabels }}
    {{- include "common.tplvalues.render" ( dict "value" .Values.registerConsumers.additionalLabels "context" . ) | nindent 4 }}
    {{- end }}
  {{- if .Values.registerConsumers.additionalAnnotations }}
  annotations: {{- include "common.tplvalues.render" ( dict "value" .Values.registerConsumers.additionalAnnotations "context" . ) | nindent 4 }}
  {{- end }}
spec:
  template:
    metadata:
      annotations:
        checksum/configmap: {{ include (print .Template.BasePath "/configmap.yaml") . | sha256sum }}
        {{- if .Values.registerConsumers.podAnnotations }}
        {{- include "common.tplvalues.render" (dict "value" .Values.registerConsumers.podAnnotations "context" .) | nindent 8 }}
        {{- end }}
      labels:
        {{- $commonLabels := include "common.labels.standard" . | fromYaml }}
        {{- $uiLabels := dict "app.kubernetes.io/name" $fullnameWithRevision }}
        {{- $mergedLabels := merge $uiLabels $commonLabels}}
        {{- toYaml $mergedLabels | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      restartPolicy: Never
      volumes:
        {{- if .Values.registerConsumers.createUsers }}
        - name: consumer-secrets
          projected:
            sources:
              {{- range $consumer, $data := .Values.registerConsumers.createUsers }}
              - secret:
                  {{- $_ := required "Consumer secrets can only be configured as existing secret, see registerConsumers.createUsers.*.existingSecret.name" ($data.existingSecret).name }}
                  name: {{ include "nubus-common.secrets.name" ( dict "existingSecret" $data.existingSecret "context" $ ) }}
                  items:
                    - key: {{ include "nubus-common.secrets.key" (dict "existingSecret" $data.existingSecret "key" "registration") }}
                      path: {{ printf "%s.json" ( lower $consumer ) }}
              {{- end }}
        {{- end }}
        - name: "scripts-volume"
          configMap:
            name: {{ printf "%s-wait-for-api" $fullname }}
            defaultMode: 0555
        - name: wait-for-data-loader
          configMap:
            name: {{ printf "%s-register-consumers" $fullname }}
      initContainers:
        - name: wait-for-provisioning-api
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          image: "{{ coalesce .Values.registerConsumers.image.registry .Values.global.imageRegistry }}/{{ .Values.registerConsumers.image.repository }}:{{ .Values.registerConsumers.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.registerConsumers.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" $fullname }}
          command: ["/bin/bash", "-c", "/scripts/wait-for-api.sh ${PROVISIONING_API_BASE_URL}"]
          {{- if .Values.resources.registerConsumers }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.registerConsumers "context" .) | nindent 12 }}
          {{- end }}
          volumeMounts:
            - name: scripts-volume
              mountPath: /scripts
        - name: wait-for-data-loader
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          command: ["/bin/bash", "/scripts/wait-for-data-loader.sh"]
          image: "{{ coalesce .Values.registerConsumers.image.registry .Values.global.imageRegistry }}/{{ .Values.registerConsumers.image.repository }}:{{ .Values.registerConsumers.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.registerConsumers.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" $fullname }}
          env:
            - name: UDM_USERNAME
              value: "cn=admin"
            - name: UDM_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.registerConsumers.udm.auth.existingSecret "defaultNameSuffix" "register-consumers-udm" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.registerConsumers.udm.auth.existingSecret "key" "password") }}
          volumeMounts:
            - name: wait-for-data-loader
              mountPath: /scripts
          {{- if .Values.resources.registerConsumers }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.registerConsumers "context" .) | nindent 12 }}
          {{- end }}
      containers:
        - name: main
          securityContext: {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
          image: "{{ coalesce .Values.registerConsumers.image.registry .Values.global.imageRegistry }}/{{ .Values.registerConsumers.image.repository }}:{{ .Values.registerConsumers.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.registerConsumers.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          volumeMounts:
            - name: consumer-secrets
              mountPath: "/secrets"
          envFrom:
            - configMapRef:
                name: {{ printf "%s-register-consumers" $fullname }}
          env:
            - name: ADMIN_USERNAME
              value: "admin"
            - name: ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.api.auth.admin.existingSecret "defaultNameSuffix" "api-admin" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.api.auth.admin.existingSecret "key" "password") }}
          command:
            - "/bin/sh"
            - "-c"
          args:
            - |
              for file in /secrets/*; do
                filename=$(basename "${file}" .json)
                response=$(set +x; curl -s -o response.txt -w "%{http_code}" -u "${ADMIN_USERNAME}":"${ADMIN_PASSWORD}" \
                -H 'Content-Type: application/json' \
                -d @"${file}" "${PROVISIONING_API_BASE_URL}")

                if [ "${response}" -eq 201 ]; then
                  echo "Successful registration of the consumer: "${filename}""
                elif [ "${response}" -eq 200 ]; then
                  echo "Consumer with the name '"${filename}"' is already registered with the same parameters"
                else
                  echo "Failed to register the consumer: "${filename}"
              Response code: "${response}"
              Response body: $(cat response.txt)"
                  exit 1
                fi
                echo ------------------------------------
              done
          {{- if .Values.resources.registerConsumers }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources.registerConsumers "context" .) | nindent 12 }}
          {{- end }}
