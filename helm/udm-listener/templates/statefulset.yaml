{{/*
SPDX-FileCopyrightText: 2024 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---

apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: '{{ include "common.names.fullname" . }}'
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  serviceName: {{ include "common.names.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: '{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}'
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers:
        {{- include "common.tplvalues.render" (dict "value" .Values.extraInitContainers "context" .) | nindent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-nats
          command: [ "/usr/local/bin/wait-for-nats.py" ]
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            privileged: false
          {{- end }}
          image: "{{ coalesce .Values.waitForDependency.image.registry .Values.global.imageRegistry }}/{{ .Values.waitForDependency.image.repository }}:{{ .Values.waitForDependency.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.waitForDependency.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          {{- if .Values.waitForDependency.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.waitForDependency.resources "context" .) | nindent 12 }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: '{{ include "common.names.fullname" . }}'
          env:
            - name: NATS_USER
              value: {{ tpl (required "A NATS username is required, see parameter nats.auth." .Values.nats.auth.user) . | quote }}
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.nats.auth.existingSecret "defaultNameSuffix" "nats" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.nats.auth.existingSecret "key" "password" "context" .) }}
      containers:
        - name: "main"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            privileged: false  # Explicitly set privileged to false
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          {{- if .Values.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          {{- end }}
          {{- if .Values.livenessProbe.enabled }}
          livenessProbe: {{- omit .Values.livenessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.readinessProbe.enabled }}
          readinessProbe: {{- omit .Values.readinessProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          {{- if .Values.startupProbe.enabled }}
          startupProbe: {{- omit .Values.startupProbe "enabled" | toYaml | nindent 12 }}
          {{- end }}
          envFrom:
            - configMapRef:
                name: '{{ include "common.names.fullname" . }}'
          env:
            - name: NATS_USER
              value: {{ tpl (required "A NATS username is required, see parameter nats.auth." .Values.nats.auth.user) . | quote }}
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.nats.auth.existingSecret "defaultNameSuffix" "nats" "context" .) }}
                  key: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.nats.auth.existingSecret "key" "password" "context" .) }}
          ports:
            - name: "http"
              containerPort: 80
              protocol: "TCP"
          volumeMounts:
            - name: "config-files"
              mountPath: "/etc/univention"
            - name: "config-files"
              mountPath: "/etc/ldap/ldap.conf"
              subPath: "ldap.conf"
            - name: secret-ldap
              mountPath: /var/secrets/ldap_password
              subPath: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldap.auth.existingSecret "key" "password" "context" .) }}
              readOnly: true
            {{- if (include "udm-listener.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.config.secretMountPath }}/ca_cert"
              subPath: {{ .Values.ldap.tlsSecret.caCertKey | quote }}
              readOnly: true
            {{- end }}
            - name: "data"
              mountPath: "/var/lib/univention-directory-listener"
            - name: "data"
              mountPath: "/var/lib/univention-ldap/schema/id"
            - name: "data"
              mountPath: "/var/log/univention"
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        - name: "config-files"
          configMap:
            name: {{ printf "%s-files" (include "common.names.fullname" .) | quote }}
        - name: secret-ldap
          secret:
            defaultMode: 0400
            secretName: {{ include "nubus-common.secrets.name" (dict "existingSecret" .Values.ldap.auth.existingSecret "defaultNameSuffix" "ldap" "context" .) }}
        {{- if (include "udm-listener.ldap.tlsSecret.name" . ) }}
        - name: {{ printf "%s-volume" (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
          secret:
            secretName: {{ (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "data"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: {{ .Values.persistence.size }}
      {{- if .Values.persistence.storageClass }}
      storageClassName: {{ .Values.persistence.storageClass | quote }}
      {{- end }}

...
