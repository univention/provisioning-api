{{/*
SPDX-FileCopyrightText: 2024 Univention GmbH
SPDX-License-Identifier: AGPL-3.0-only
*/}}
---

apiVersion: "apps/v1"
kind: "StatefulSet"
metadata:
  name: '{{ include "common.names.fullname" . }}'
  labels:
    {{- include "common.labels.standard" . | nindent 4 }}
spec:
  serviceName: {{ include "common.names.fullname" . }}
  replicas: {{ .Values.replicaCount }}
  selector:
    matchLabels:
      {{- include "common.labels.matchLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
        checksum/config: '{{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}'
        checksum/secret: '{{ include (print $.Template.BasePath "/secret.yaml") . | sha256sum }}'
        {{- with .Values.podAnnotations }}
          {{- toYaml . | nindent 8 }}
        {{- end }}
      labels:
        {{- include "common.labels.matchLabels" . | nindent 8 }}
    spec:
      {{- if or .Values.imagePullSecrets .Values.global.imagePullSecrets  }}
      imagePullSecrets:
        {{- range .Values.global.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
        {{- range .Values.imagePullSecrets }}
        - name: "{{ . }}"
        {{- end }}
      {{- end }}
      {{- if .Values.affinity }}
      affinity: {{- include "common.tplvalues.render" (dict "value" .Values.affinity "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.tolerations }}
      tolerations: {{- include "common.tplvalues.render" (dict "value" .Values.tolerations "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.topologySpreadConstraints }}
      topologySpreadConstraints: {{- include "common.tplvalues.render" (dict "value" .Values.topologySpreadConstraints "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.nodeSelector }}
      nodeSelector: {{- include "common.tplvalues.render" (dict "value" .Values.nodeSelector "context" .) | nindent 8 }}
      {{- end }}
      {{- if .Values.podSecurityContext.enabled }}
      securityContext: {{- omit .Values.podSecurityContext "enabled" | toYaml | nindent 8 }}
      {{- end }}
      {{- if .Values.serviceAccount.create }}
      serviceAccountName: {{ include "common.names.fullname" . }}
      {{- end }}
      {{- if .Values.terminationGracePeriodSeconds }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- end }}
      {{- if .Values.extraInitContainers }}
      initContainers: {{- include "common.tplvalues.render" (dict "value" .Values.extraInitContainers "context" .) | nindent 8 }}
      {{- end }}
      containers:
        - name: "udm-listener"
          {{- if .Values.containerSecurityContext.enabled }}
          securityContext:
            {{- omit .Values.containerSecurityContext "enabled" | toYaml | nindent 12 }}
            privileged: false  # Explicitly set privileged to false
          {{- end }}
          image: "{{ coalesce .Values.image.registry .Values.global.imageRegistry }}/{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: {{ coalesce .Values.image.pullPolicy .Values.global.imagePullPolicy | quote }}
          {{- if .Values.resources }}
          resources: {{- include "common.tplvalues.render" (dict "value" .Values.resources "context" .) | nindent 12 }}
          {{- end }}
          livenessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.livenessProbe "context" .) | nindent 12 }}
          readinessProbe: {{- include "common.tplvalues.render" (dict "value" .Values.readinessProbe "context" .) | nindent 12 }}
          startupProbe: {{- include "common.tplvalues.render" (dict "value" .Values.startupProbe "context" .) | nindent 12 }}
          envFrom:
            - configMapRef:
                name: '{{ include "common.names.fullname" . }}'
          command:
            - "/bin/bash"
            - "-c"
            - |
              /usr/sbin/univention-directory-listener \
              -F \
              -x \
              -d "${DEBUG_LEVEL}" \
              -b "${LDAP_BASE_DN}" \
              -D "cn=admin,${LDAP_BASE_DN}" \
              -n "${NOTIFIER_SERVER}" \
              -m "/usr/lib/univention-directory-listener/system" \
              -c "/var/lib/univention-directory-listener" \
              -y "${LDAP_PASSWORD_FILE}" -Z
          env:
            - name: NATS_USER
              value: {{ .Values.config.natsUser | quote }}
            {{- if .Values.global.nubusDeployment }}
            - name: NATS_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ tpl .Values.nats.auth.existingSecret.name . }}
                  key: {{ tpl .Values.nats.auth.existingSecret.keyMapping.password . }}
            {{- else if .Values.config.natsPassword }}
            - name: NATS_PASSWORD
              value: {{ .Values.config.natsPassword | quote }}
            {{- end }}
            {{- if .Values.global.nubusDeployment }}
            - name: EVENTS_USERNAME_UDM
              value: {{ .Values.provisioningApi.auth.username | quote }}
            - name: EVENTS_PASSWORD_UDM
              valueFrom:
                secretKeyRef:
                  name: {{ tpl .Values.provisioningApi.auth.existingSecret.name . }}
                  key: {{ tpl .Values.provisioningApi.auth.existingSecret.keyMapping.password . }}
            {{- else if .Values.config.eventsPasswordUdm }}
            - name: EVENTS_USERNAME_UDM
              value: {{ .Values.config.eventsUsernameUdm | quote }}
            - name: EVENTS_PASSWORD_UDM
              value: {{ .Values.config.eventsPasswordUdm | quote }}
            {{- end }}
          ports:
            - name: "http"
              containerPort: 80
              protocol: "TCP"
          volumeMounts:
            - name: "config-files"
              mountPath: "/etc/univention"
            - name: "config-files"
              mountPath: "/etc/ldap/ldap.conf"
              subPath: "ldap.conf"
            {{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
            - name: "secrets"
              mountPath: "{{ .Values.config.secretMountPath }}"
            {{- else }}
            {{- if .Values.ldap.auth.existingSecret.name  }}
            - name: {{ printf "%s-volume" (tpl .Values.ldap.auth.existingSecret.name . ) | quote }}
              subPath: {{ include "nubus-common.secrets.key" (dict "existingSecret" .Values.ldap.auth.existingSecret "key" "password") }}
              mountPath: "{{ .Values.config.secretMountPath }}/ldap_secret"
            - name: {{ printf "%s-volume" (tpl .Values.ldap.auth.existingSecret.name . ) | quote }}
              mountPath: "{{ .Values.config.secretMountPath }}/machine_secret"
              subPath: {{ include "common.secrets.key" (dict "existingSecret" .Values.ldap.auth.existingSecret "key" "password") }}
              readOnly: true
            {{- end }}
            {{- if (include "udm-listener.ldap.tlsSecret.name" . ) }}
            - name: {{ printf "%s-volume" (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
              mountPath: "{{ .Values.config.secretMountPath }}/ca_cert"
              subPath: {{ .Values.ldap.tlsSecret.caCertKey | quote }}
              readOnly: true
            {{- end }}
            {{- end }}
            - name: "data"
              mountPath: "/var/lib/univention-directory-listener"
            - name: "data"
              mountPath: "/var/lib/univention-ldap/schema/id"
            - name: "data"
              mountPath: "/var/log/univention"
            {{- if .Values.extraVolumeMounts }}
            {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumeMounts "context" .) | nindent 12 }}
            {{- end }}
      volumes:
        - name: "config-files"
          configMap:
            name: {{ printf "%s-files" (include "common.names.fullname" .) | quote }}
        {{- if and .Values.mountSecrets (not .Values.global.nubusDeployment) }}
        - name: "secrets"
          secret:
            secretName: {{ include "common.names.fullname" . | quote }}
        {{- else }}
        {{- if .Values.ldap.auth.existingSecret.name  }}
        - name: {{ printf "%s-volume" (tpl .Values.ldap.auth.existingSecret.name . ) | quote }}
          secret:
            secretName: {{ tpl .Values.ldap.auth.existingSecret.name . }}
        {{- end }}
        {{- if (include "udm-listener.ldap.tlsSecret.name" . ) }}
        - name: {{ printf "%s-volume" (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
          secret:
            secretName: {{ (include "udm-listener.ldap.tlsSecret.name" . ) | quote }}
        {{- end }}
        {{- end }}
        {{- if .Values.extraVolumes }}
        {{- include "common.tplvalues.render" (dict "value" .Values.extraVolumes  "context" .) | nindent 8 }}
        {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
  volumeClaimTemplates:
  - metadata:
      name: "data"
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: "1Gi"

...
