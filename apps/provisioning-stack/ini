[Application]
ID = provisioning-stack
Code = 4Q
Version = 1.0
Name = Provisioning Stack (preview)
Vendor = Univention GmbH
DockerScriptRestoreDataAfterSetup = 
DockerScriptStoreData = 
DockerScriptUpdateAvailable = 
DockerScriptRestoreDataBeforeSetup = 
DockerScriptUpdatePackages = 
DockerScriptUpdateAppVersion = 
DockerScriptUpdateRelease = 
DockerScriptSetup = 
DockerMainService = provisioning-api
RequiredAppsInDomain = provisioning-stack-backend
LongDescription = <b>This is a preview</b> of the upcoming &quot;Provisioning Stack&quot; from Nubus. The web API allows Consumers to process certain Events that other services wrote into the queue. Note that this is a tech preview that does not come with any guarantee to stability or updatability, nor a final documentation.
	<br>
	<br>
	That being said, it can be used by interested software vendors to write their own consumer services against this API. A first document can be found&nbsp;<a href="https://docs.software-univention.de/nubus-kubernetes-customization/1.x/en/api/provisioning.html">here</a>.
	<br>
	<br>
	An example consumer can be found in the code snippet below. Please note that the web API is naturally language agnostic.
	<pre>
	#!/usr/bin/python3
	import json
	import requests
	
	provisioning_url = "http://localhost:7778/"
	sub_name = "example"
	
	def provisioning_admin_password():
	    return json.load(open("/etc/provisioning-json.secrets"))["ADMIN_NATS_PASSWORD"]
	
	def create_sub(provisioning_admin_username, provisioning_admin_password):
	    create_sub_json = {
	      "name": sub_name,
	      "realms_topics": [
	        {
	          "realm": "udm",
	          "topic": "users/user"
	        }
	      ],
	      "request_prefill": True,
	      "password": "s3cr3t"
	    }
	    requests.delete(provisioning_url + "v1/subscriptions/%s" % sub_name, auth=(provisioning_admin_username, provisioning_admin_password))
	    resp = requests.post(provisioning_url + "v1/subscriptions", json=create_sub_json, auth=(provisioning_admin_username, provisioning_admin_password))
	    assert resp.status_code == 201
	
	create_sub("admin", provisioning_admin_password())
	
	# get the next message
	resp = requests.get(provisioning_url + "v1/subscriptions/%s/messages/next" % sub_name, auth=(sub_name, "s3cr3t"))
	
	# process the message
	print(resp.json())
	
	# tell the queue that you successfully processed this message
	seq_num = resp.json()["sequence_number"]
	stat_json = {
	  "status": "ok"
	}
	resp = requests.patch(provisioning_url + "v1/subscriptions/%s/messages/%s/status" % (sub_name,seq_num), json=stat_json, auth=(sub_name, "s3cr3t"))
	
	# now you can again get the next message
	
	# finally we may delete the subscription again
	requests.delete(provisioning_url + "v1/subscriptions/%s" % sub_name, auth=("admin", provisioning_admin_password()))
	</pre>
SupportUrl = https://www.univention.com/products/support/community-support/
Contact = sales@univention.de
WebsiteVendor = https://univention.com/
NotificationEmail = appcenter-reporting@univention.de
License = free
NotifyVendor = True
Logo = logo.svg
Description = preview of the upcoming "Provisioning Stack" from Nubus

[de]
SupportUrl = https://www.univention.de/produkte/support/community-support/
WebsiteVendor = https://univention.de/
Name = Provisioning Stack (preview)

